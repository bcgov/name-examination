steps:
  # install / setup ci
  - name: node:20.5.1
    entrypoint: npm
    args: ['install']

  # setup .env
  - name: 'bash'
    script: |
      #!/usr/bin/env bash
      cp .env.example .env

  #
  # Generate the static site
  #
  - name: node:20.5.1
    entrypoint: npm
    env:
      - 'NUXT_API_KEY=$_NUXT_API_KEY'
      - 'NUXT_AUTH_DOMAIN=$_NUXT_AUTH_DOMAIN'
      - 'NUXT_PROJECT_ID=$_NUXT_PROJECT_ID'
      - 'NUXT_APP_ID=$_NUXT_APP_ID'
    args: ['run', 'build']

  #
  # Deploy to firebase channel, using the PR #
  # store log to /workspace to get the channel URL
  #
  - name: gcr.io/yfthig-dev/firebase
    entrypoint: bash
    args: ['-c', 'firebase hosting:channel:deploy --project=yfthig-dev PR-$_PR_NUMBER > /workspace/firebase-deploy.txt']

  #
  # Generate GitHub App installation token
  #
  - id: "Generate GitHub App token"
    name: python:3.11
    entrypoint: bash
    args:
      - -c
      - |
        pip install pyjwt cryptography requests
        python <<EOF
        import os, time, jwt, requests
        from cryptography.hazmat.primitives import serialization

        # Load GitHub App info from env
        app_id = os.environ["GITHUB_APP_ID"]
        installation_id = os.environ["GITHUB_INSTALLATION_ID"]
        private_key = os.environ["GITHUB_APP_PRIVATE_KEY"]

        # Build JWT
        now = int(time.time())
        payload = {
            "iat": now,
            "exp": now + 540,  # 9 minutes
            "iss": app_id,
        }
        key = serialization.load_pem_private_key(private_key.encode(), password=None)
        jwt_token = jwt.encode(payload, key, algorithm="RS256")

        # Exchange for installation token
        headers = {"Authorization": f"Bearer {jwt_token}", "Accept": "application/vnd.github.v3+json"}
        url = f"https://api.github.com/app/installations/{installation_id}/access_tokens"
        r = requests.post(url, headers=headers)
        r.raise_for_status()
        token = r.json()["token"]

        # Write token for next step
        with open("/workspace/github_token.txt", "w") as f:
            f.write(token)
        EOF
    secretEnv: ['GITHUB_APP_PRIVATE_KEY']
    env:
      - 'GITHUB_APP_ID=1891678'
      - 'GITHUB_INSTALLATION_ID=84188761'

  #
  # Update the PR with the temporary URL
  #
  - id: "Update the PR"
    name: gcr.io/cloud-builders/curl
    entrypoint: bash
    args:
      - -c
      - |
        # Read Firebase URL
        url=$(grep 'Channel URL' /workspace/firebase-deploy.txt | grep -Eo "https://[a-zA-Z0-9./?=_%:-]*")
        echo "Posting PR comment with URL: $url"

        # Read GitHub App installation token
        GITHUB_TOKEN=$(cat /workspace/github_token.txt)

        curl -X POST \
          https://api.github.com/repos/bcgov/name-examination/issues/$_PR_NUMBER/comments \
          --header "Authorization: token $GITHUB_TOKEN" \
          --header "Accept: application/vnd.github.v3+json" \
          --data-binary '{"body": "Temporary Url for review: '"$url"'"}'

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/private-key-pr-review/versions/latest
      env: 'GITHUB_APP_PRIVATE_KEY'

options:
  dynamic_substitutions: true
