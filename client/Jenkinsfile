#!/usr/bin/env groovy
// Copyright Â© 2018 Province of British Columbia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

//JENKINS DEPLOY ENVIRONMENT VARIABLES:
// - JENKINS_JAVA_OVERRIDES  -Dhudson.model.DirectoryBrowserSupport.CSP= -Duser.timezone=America/Vancouver
//   -> user.timezone : set the local timezone so logfiles report correxct time
//   -> hudson.model.DirectoryBrowserSupport.CSP : removes restrictions on CSS file load, thus html pages of test reports are displayed pretty
//   See: https://docs.openshift.com/container-platform/3.9/using_images/other_images/jenkins.html for a complete list of JENKINS env vars
// - SLACK_TOKEN


// This requires a chained build, which is a multi-staged build:
// 1. first buildconfig outputs an intermediate image with the compiled final product
// 2. a second stage build that copies the compiled product to a production image

// Front-end constants.  Extra because of the chained build.  "INT" = Intermediate.
def FE_INT_BUILDCFG_NAME ='namex-fe-build'  // TODO: rename build to "namex-fe-int-build"
def FE_INT_IMAGE_NAME = 'namex-front'       // TODO: rename image to "namex-fe-int-image"

def FE_BUILDCFG_NAME ='namex-fe-web'        // TODO: rename build to "namex-fe-build"
def FE_IMAGE_NAME = 'namex-front-caddy'     // TODO: rename image to "namex-fe-image"
def FE_DEPLOYMENT_NAME = 'namex-fe-web-caddy'  // TODO: rename deployment to "namex-fe-deploy"

def BUILDCFG_NAME ='namex-web'
def IMAGE_NAME = 'namex-front-caddy'

def DEV_DEPLOYMENT_NAME = 'namex-web-dev'
def DEV_TAG_NAME = 'dev'
def DEV_NS = 'servicebc-ne-dev'

def TST_DEPLOYMENT_NAME = 'namex-web-test'
def TST_TAG_NAME = 'test'
def TST_BCK_TAG_NAME = 'test-previous'
def TST_NS = 'servicebc-ne-test'

def PROD_DEPLOYMENT_NAME = 'namex-web'
def PROD_TAG_NAME = 'prod'
def PROD_BCK_TAG_NAME = 'prod-previous'
def PROD_NS = 'servicebc-ne-prod'

def CONTEXT_DIRECTORY = 'client'

// define groovy functions
import groovy.json.JsonOutput

// send a msg to slack channel
def notifySlack(text, channel, url, attachments) {
    def slackURL = url
    def jenkinsIcon = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'
    def payload = JsonOutput.toJson([text: text,
        channel: channel,
        username: "Jenkins",
        icon_url: jenkinsIcon,
        attachments: attachments
    ])
    def encodedReq = URLEncoder.encode(payload, "UTF-8")
    sh("curl -s -S -X POST " +
            "--data \'payload=${encodedReq}\' ${slackURL}")
}

// Determine whether there were any changes the files within the project's context directory.
// return a string listing commit msgs occurred since last build
@NonCPS
String triggerBuild(String contextDirectory) {
    // Determine if code has changed within the source context directory.
    def changeLogSets = currentBuild.changeSets
    def filesChangeCnt = 0
    MAX_MSG_LEN = 512
    def changeString = ""
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            //echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
            def files = new ArrayList(entry.affectedFiles)

            for (int k = 0; k < files.size(); k++) {
                def file = files[k]
                def filePath = file.path
                echo "${file}"
                if (filePath.contains(contextDirectory)) {

                    filesChangeCnt = 1
                    truncated_msg = entry.msg.take(MAX_MSG_LEN)
                    changeString += " - ${truncated_msg} [${entry.author}]\n"
                    k = files.size()
                    j = entries.length
                }
            }
        }
    }
    if ( filesChangeCnt < 1 ) {
        echo('The changes do not require a build.')
        return ""
    }
    else {
        echo('The changes require a build.')
        return changeString
    }
}

// pipeline

// Note: openshiftVerifyDeploy requires policy to be added:
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-dev
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-test
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-prod

// define job properties - keep 10 builds only
properties([[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10']]])

def run_pipeline = true
if( triggerBuild(CONTEXT_DIRECTORY) == "" ) {
    node {
        SLACK_TOKEN = sh (
                    script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                        returnStdout: true).trim()

        // send msg to slack
        def attachment = [:]
        attachment.fallback = "See build log for more details"
        attachment.title = "NAMEX-WEB Build ${BUILD_ID} has no changes"
        attachment.color = "#00FF00" // Lime Green
        attachment.text = "Proceed anyways?" //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
        def decision = [:]
        decision.type = "button"
        decision.text = "Proceed/Abort?"
        decision.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-name-examination-pipeline/${BUILD_ID}/input"
        decision.short = false
        attachment.actions = [decision]
        notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
    }
    try {
        timeout(time: 1, unit: 'DAYS') {
            input message: "Run namex-web-pipeline?", id: "1234", submitter: 'admin,ljtrent-admin,thorwolpert-admin,rarmitag-admin,kialj876-edit,katiemcgoff-edit,waltermoar-admin'
        }
    } catch (Exception e) {
        run_pipeline = false;
    }

}

if (!run_pipeline) {
    // The changeSets did not contain any changes within the project's context directory.
    // Clearly indicate there were no changes.
    stage('No Changes') {
        node {
            SLACK_TOKEN = sh (
                    script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                        returnStdout: true).trim()

            // send msg to slack
            def attachment = [:]
            attachment.fallback = "See build log for more details"
            attachment.title = "NAMEX-WEB Build $BUILD_ID prevented because there were no changes"
            attachment.color = "#00FF00" // Lime Green
            attachment.text = "No changes applied to namex-api" //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
            notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

            currentBuild.result = 'SUCCESS'
        }
    }
} else {
    node {
        SLACK_TOKEN = sh (
                script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                    returnStdout: true).trim()

        // send msg to slack
        def attachment = [:]
        attachment.fallback = "See build log for more details"
        attachment.title = "NAMEX-WEB pipeline executing..."
        attachment.color = "#00FF00" // Lime Green
        notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

        // Part 1 - CI - Source code scanning, build

        stage('Checkout') {
            try {
                echo "checking out source"
                echo "Build: ${BUILD_ID}"
                checkout scm
                GIT_COMMIT_SHORT_HASH = sh (
                            script: """git describe --always""", returnStdout: true
                        ).trim()
                GIT_COMMIT_AUTHOR = sh (
                        script: """git show -s --pretty=%an""", returnStdout: true
                    ).trim()

            } catch (Exception e) {
                echo "error during checkout: ${e}"
                // send msg to slack
                attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-WEB failed to CHECKOUT :fire:"
                attachment.color = "danger" // red
                def logs = [:]
                logs.type = "button"
                logs.text = "Build Log"
                logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-name-examination-pipeline/${BUILD_ID}/console"
                logs.short = false
                attachment.actions = [logs]
                notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                error('Aborted')
            }
        }//end stage

        stage('Intermediate Build') {
            try {
                echo ">>> Building namex-web intermediate image..."
                openshiftBuild bldCfg: FE_INT_BUILDCFG_NAME, showBuildLogs: 'true'

                echo ">>> Get Intermediate Image Hash"
                IMAGE_HASH = sh (
                    script: 'oc get istag namex-front:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
                        returnStdout: true).trim()
                echo ">>> IMAGE_HASH: $IMAGE_HASH"
                echo ">>> Intermediate Image Build Complete"

            } catch (Exception e) {
                echo "error during intermediate build: ${e}"
                // send msg to slack
                attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-WEB failed INTERMEDIATE BUILD :fire:"
                attachment.color = "danger" // red
                def logs = [:]
                logs.type = "button"
                logs.text = "Build Log"
                logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-name-examination-pipeline/${BUILD_ID}/console"
                logs.short = false
                attachment.actions = [logs]
                notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                error('Aborted')
            }
        }//end stage

        stage ('Final Build') {
            try {
                echo ">>> Building Namex final image..."
                openshiftBuild bldCfg: FE_BUILDCFG_NAME, showBuildLogs: 'true'

                echo ">>> Get Final Image Hash"
                IMAGE_HASH = sh (
                    script: 'oc get istag namex-front-caddy:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
                        returnStdout: true).trim()
                echo ">>> IMAGE_HASH: $IMAGE_HASH"

            } catch (Exception e) {
                echo "error during final build: ${e}"
                // send msg to slack
                attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-WEB failed FINAL BUILD :fire:"
                attachment.color = "danger" // red
                def logs = [:]
                logs.type = "button"
                logs.text = "Build Log"
                logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-name-examination-pipeline/${BUILD_ID}/console"
                logs.short = false
                attachment.actions = [logs]
                notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                error('Aborted')
            }

            // send msg to slack
            attachment = [:]
            attachment.fallback = "See build log for more details"
            attachment.title = "NAMEX-WEB Build ${BUILD_ID} OK! :heart: :tada:"
            attachment.color = "#00FF00" // Lime Green
            attachment.text = "Changes applied:\n" + triggerBuild(CONTEXT_DIRECTORY) //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
            def details = [:]
            details.type = "button"
            details.text = "Details"
            details.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-name-examination-pipeline/${BUILD_ID}"
            details.short = false
            attachment.actions = [details]
            notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

        }//end stage

        //Part 2 deploy to dev

        stage ('Deploy DEV') {
            try {
                openshiftTag destStream: FE_IMAGE_NAME, verbose: 'true', destTag: 'dev', srcStream: FE_IMAGE_NAME, srcTag: "${IMAGE_HASH}"

                sleep 5

                openshiftVerifyDeployment depCfg: FE_DEPLOYMENT_NAME, namespace: 'servicebc-ne-dev', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'
                echo ">>> Deployment Complete"

            } catch (Exception e) {
                echo "error during dev deploy: ${e}"
                // send msg to slack
                attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-WEB failed to DEPLOY to DEV :fire:"
                attachment.color = "danger" // red
                def logs = [:]
                logs.type = "button"
                logs.text = "Build Log"
                logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-name-examination-pipeline/${BUILD_ID}/console"
                logs.short = false
                attachment.actions = [logs]
                notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                error('Aborted')
            }

            // send msg to slack
            attachment = [:]
            attachment.fallback = "See build log for more details"
            attachment.title = "NAMEX-WEB successfully deployed to DEV :rocket:"
            attachment.color = "#00FF00" // Lime Green
            notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

        }//end stage
    }//end node

    // Part 3 - Security scan of deployed app in dev

    //node/pod needs environment setup for zap scan
    def zappodlabel1 = "myapp-zap-${UUID.randomUUID().toString()}"
    podTemplate(label: zappodlabel1, name: zappodlabel1, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
        containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '3Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
    ])
    {
        node(zappodlabel1) {
            SLACK_TOKEN = sh (
                script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                    returnStdout: true).trim()

            stage('ZAP Security Scan DEV') {

                sleep 60

                try {
                    def retVal = sh returnStatus: true, script: '/zap/zap-baseline.py -r baseline.html -t http://namex-fe-web-caddy-dev.pathfinder.gov.bc.ca'
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'baseline.html', reportName: 'ZAP Baseline Scan', reportTitles: 'ZAP Baseline Scan'])
                    echo "Return value is: ${retVal}"

                } catch (Exception e) {
                    echo "error during dev zap scan: ${e}"
                    // send msg to slack
                    def attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "NAMEX-WEB-DEV failed ZAP-SCAN :x:"
                    attachment.color = "danger" // red
                    def logs = [:]
                    logs.type = "button"
                    logs.text = "Build Log"
                    logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-name-examination-pipeline/${BUILD_ID}/console"
                    logs.short = false
                    attachment.actions = [logs]
                    notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                }
                // send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-WEB-DEV passed ZAP-SCAN :white_check_mark:"
                attachment.color = "#00FF00" // Lime Green
                notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
            }//end stage
        }//end node
    }//end pod template

    //Part 4 deploy to test

    stage('Deploy TEST') {
        node {
            SLACK_TOKEN = sh (
                script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                    returnStdout: true).trim()

            //send msg to slack
            def attachment = [:]
            attachment.title = "NAMEX-WEB ready for DEPLOY to TEST"
            attachment.color = "#ffff00" // yellow
            def decision = [:]
            decision.type = "button"
            decision.text = "Proceed/Abort?"
            decision.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-name-examination-pipeline/${BUILD_ID}/input"
            decision.short = false
            attachment.actions = [decision]
            notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
        }

        def abort = false;
        try {
            timeout(time: 1, unit: 'DAYS') {
                input message: "Deploy to test?", submitter: 'admin,ljtrent-admin,thorwolpert-admin,rarmitag-admin,kialj876-edit,katiemcgoff-edit,waltermoar-admin'
            }
        } catch (Exception e) {
            abort = true;
        }
        node {
            SLACK_TOKEN = sh (
                    script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                        returnStdout: true).trim()
            if (abort) {
                //send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-WEB-TEST ABORTED :boom:"
                attachment.color = "danger" // red
                notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

                echo ">>>> Deployment Aborted"
                error('Aborted')
            } else {
                try {
                    echo ">>> Tag ${TST_TAG_NAME} with ${TST_BCK_TAG_NAME}"
                    openshiftTag destStream: IMAGE_NAME, verbose: 'false', destTag: TST_BCK_TAG_NAME, srcStream: IMAGE_NAME, srcTag: TST_TAG_NAME

                    echo ">>> Tag ${IMAGE_HASH} with ${TST_TAG_NAME}"
                    openshiftTag destStream: IMAGE_NAME, verbose: 'false', destTag: TST_TAG_NAME, srcStream: IMAGE_NAME, srcTag: "${IMAGE_HASH}"

                    sleep 5

                    openshiftVerifyDeployment depCfg: TST_DEPLOYMENT_NAME, namespace: TST_NS, replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'
                    echo ">>>> Deployment Complete"

                } catch (Exception e) {
                    echo "error during test deploy: ${e}"
                    // send msg to slack
                    attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "NAMEX-WEB failed to DEPLOY to TEST :fire:"
                    attachment.color = "danger" // red
                    def logs = [:]
                    logs.type = "button"
                    logs.text = "Build Log"
                    logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-name-examination-pipeline/${BUILD_ID}/console"
                    logs.short = false
                    attachment.actions = [logs]
                    notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                    error('Aborted')
                }

                //send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-WEB successfully depoyed to TEST :rocket::rocket:"
                attachment.color = "#00FF00" // Lime Green
                notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
            }
        }//end node
    }//end stage

    // Part 5 - Security scan of deployed app in test

    //node/pod needs environment setup for zap scan
    def zappodlabel2 = "myapp-zap-${UUID.randomUUID().toString()}"
    podTemplate(label: zappodlabel2, name: zappodlabel2, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
        containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '3Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
    ])
    {
        node(zappodlabel2) {
            stage('ZAP Security Scan TEST') {

                sleep 60

                try {
                    def retVal = sh returnStatus: true, script: '/zap/zap-baseline.py -r baseline.html -t http://namex-web-test-test.pathfinder.gov.bc.ca'
                    // publishHTML([allowMissing: false`, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'baseline.html', reportName: 'ZAP Baseline Scan', reportTitles: 'ZAP Baseline Scan'])
                    echo "Return value is: ${retVal}"

                } catch (Exception e) {
                    echo "error during test zap scan: ${e}"
                    // send msg to slack
                    attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "NAMEX-WEB-TEST failed ZAP-SCAN :x: :x:"
                    attachment.color = "danger" // red
                    def logs = [:]
                    logs.type = "button"
                    logs.text = "Build Log"
                    logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-name-examination-pipeline/${BUILD_ID}/console"
                    logs.short = false
                    attachment.actions = [logs]
                    notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                }
                // send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-WEB passed TEST ZAP SCAN :white_check_mark: :white_check_mark:"
                attachment.color = "#00FF00" // Lime Green
                notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
            }//end stage
        }//end node
    }//end pod template

    // Part 6 - deploy to prod

    stage('Deploy PROD') {
        node {
            SLACK_TOKEN = sh (
                    script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                        returnStdout: true).trim()

            //send msg to slack
            def attachment = [:]
            attachment.title = "NAMEX-WEB ready for DEPLOY to PROD"
            attachment.color = "#ffff00" // yellow
            def decision = [:]
            decision.type = "button"
            decision.text = "Proceed/Abort?"
            decision.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-name-examination-pipeline/${BUILD_ID}/input"
            decision.short = false
            attachment.actions = [decision]
            notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
        }

        def abort = false;
        try {
            timeout(time: 1, unit: 'DAYS') {
                input message: "Deploy to prod?", submitter: 'admin,ljtrent-admin,thorwolpert-admin,rarmitag-admin,kialj876-edit,katiemcgoff-edit,waltermoar-admin'
            }
        } catch (Exception e) {
            abort = true;
        }
        node {
            SLACK_TOKEN = sh (
                    script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                        returnStdout: true).trim()

            if (abort) {
                //send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-API-PROD ABORTED :boom::boom:"
                attachment.color = "danger" // red
                notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

                echo ">>>> Deployment Aborted"
                error('Aborted')
            } else {
                try {
                    echo ">>> Tag ${TST_TAG_NAME} with ${PROD_BCK_TAG_NAME}"
                    openshiftTag destStream: IMAGE_NAME, verbose: 'false', destTag: PROD_BCK_TAG_NAME, srcStream: IMAGE_NAME, srcTag: PROD_TAG_NAME
                    echo ">>> Tag ${IMAGE_HASH} with ${PROD_TAG_NAME}"
                    openshiftTag destStream: IMAGE_NAME, verbose: 'false', destTag: PROD_TAG_NAME, srcStream: IMAGE_NAME, srcTag: "${IMAGE_HASH}"

                    sleep 5

                    openshiftVerifyDeployment depCfg: PROD_DEPLOYMENT_NAME, namespace: PROD_NS, replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'
                    echo ">>>> Deployment Complete"

                } catch (Exception e) {
                    //send msg to slack
                    def attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "NAMEX-WEB failed deploying to PROD :boom::boom::boom:"
                    attachment.color = "danger" // red
                    def logs = [:]
                    logs.type = "button"
                    logs.text = "Build Log"
                    logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-name-examination-pipeline/${BUILD_ID}/console"
                    logs.short = false
                    attachment.actions = [logs]
                    notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                    error('Failure')
                }

                //send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-WEB successfully deployed to PROD :tada::rocket::tada:"
                attachment.color = "#00FF00" // Lime Green
                notifySlack("namex-web-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

                currentBuild.result='SUCCESS'
            }
        }//end node
    }//end stage
}
